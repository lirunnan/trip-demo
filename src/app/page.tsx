'use client'

import { useState, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import DemoCards from '../components/DemoCards'
import ChatInterface, { Message, ItineraryDay } from '../components/ChatInterface'
import TravelViews from '@/components/TravelViews'
import XiaohongshuExtractor from '@/components/XiaohongshuExtractor'
import { useConversationMemory } from '@/hooks/useConversationMemory'
import { useItineraryActions } from '@/hooks/useItineraryActions'
import { useExportFeatures } from '@/hooks/useExportFeatures'
import { addTimeInfoToItinerary } from '@/utils/timeCalculator'
import { generateConversationId, postConversations } from './api/conversation'
import { indexedDBManager, initIndexedDB, saveAsStaticFile } from '@/utils/indexedDB'
import { initServiceWorker } from '@/utils/serviceWorker'

interface DemoGuide {
  id: string
  title: string
  destination: string
  duration: string
  theme: string
  highlights: string[]
  preview: string
}

export default function Home() {
  const router = useRouter()
  const [messages, setMessages] = useState<Message[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [currentItinerary, setCurrentItinerary] = useState<ItineraryDay[]>([])
  const [isInitialState, setIsInitialState] = useState(true)
  const [convId, setConvId] = useState('');
  const { 
    context, 
    addUserRequest, 
    updateItinerary, 
    buildPromptContext, 
    parseUserInput 
  } = useConversationMemory()
  
  const {
    deleteLocation,
    optimizeRoute,
    generateRouteAdjustmentMessage
  } = useItineraryActions()
  
  const {
    copyShareLink,
    generateShareLink,
    exportAsTextFile
  } = useExportFeatures()


  const handleSendMessage = useCallback(async (content: string, themePrompt?: string) => {
    // ËÆ∞ÂΩïÁî®Êà∑ËØ∑Ê±ÇÂà∞‰∏ä‰∏ãÊñá
    addUserRequest(content)
    // console.log(content);
    // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØ
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content,
      timestamp: new Date()
    }
    
    setMessages(prev => [...prev, userMessage])
    setIsLoading(true)
    setIsInitialState(false)

    try {
      // Á°Æ‰øùÊúâconversationId
      let currentConvId = convId;
      if (!currentConvId) {
        currentConvId = generateConversationId();
        setConvId(currentConvId);
      }
      
      const gRes = await postConversations(currentConvId, content);
      console.log('asdf', gRes);
      // Ê∑ªÂä†AIÂìçÂ∫î
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: '',
        timestamp: new Date(),
        itinerary: gRes?.data?.plan?.itinerary
      }
      console.log(assistantMessage)
      setMessages(prev => [...prev, assistantMessage])
      
      // Êõ¥Êñ∞ÂΩìÂâçË°åÁ®ãÊï∞ÊçÆ
      if (gRes?.data?.plan?.itinerary) {
        setCurrentItinerary(gRes?.data?.plan?.itinerary)
        updateItinerary(gRes?.data?.plan?.itinerary)
      }
    } catch (error) {
      console.error('ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•:', error)
      // ÈîôËØØÂ§ÑÁêÜ
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: 'Êä±Ê≠âÔºåÁîüÊàêÊîªÁï•Êó∂Âá∫Áé∞‰∫ÜÈóÆÈ¢òÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }, [addUserRequest, convId, updateItinerary])

  const handleSelectDemo = useCallback((demo: DemoGuide) => {
    // ÂΩìÈÄâÊã©DemoÊîªÁï•Êó∂ÔºåËá™Âä®Â°´ÂÖ•Áõ∏ÂÖ≥ÂÜÖÂÆπÂπ∂Ëß¶ÂèëAIÂìçÂ∫î
    const demoPrompt = `ÊàëÊÉ≥ÂèÇËÄÉËøô‰∏™ÊîªÁï•Ôºö${demo.title}ÔºåËØ∑‰∏∫ÊàëÁîüÊàêËØ¶ÁªÜÁöÑË°åÁ®ãËßÑÂàí„ÄÇÁõÆÁöÑÂú∞Ôºö${demo.destination}ÔºåÊó∂ÈïøÔºö${demo.duration}Ôºå‰∏ªÈ¢òÔºö${demo.theme}„ÄÇ`
    handleSendMessage(demoPrompt)
  }, [handleSendMessage])

  const handleXiaohongshuExtract = useCallback((prompt: string, originalContent: any) => {
    // ÂΩìÂ∞èÁ∫¢‰π¶ÂÜÖÂÆπÊèêÂèñÊàêÂäüÊó∂ÔºåËá™Âä®ÂèëÈÄÅÁîüÊàêÁöÑprompt
    handleSendMessage(prompt)
  }, [handleSendMessage])

  const handleShowPopularGuides = useCallback(() => {
    router.push('/popular')
  }, [router])

  const handleLocationDelete = useCallback(async (dayIndex: number, locationIndex: number) => {
    if (currentItinerary.length === 0 || !currentItinerary[dayIndex]) return
    
    const locationToDelete = currentItinerary[dayIndex].locations[locationIndex]
    if (!locationToDelete) return
    
    // Âà†Èô§ÊôØÁÇπÂπ∂‰ºòÂåñË∑ØÁ∫ø
    let updatedItinerary = deleteLocation(currentItinerary, dayIndex, locationIndex)
    updatedItinerary = optimizeRoute(updatedItinerary, dayIndex)
    
    // Êõ¥Êñ∞Áä∂ÊÄÅ
    setCurrentItinerary(updatedItinerary)
    updateItinerary(updatedItinerary)
    
    // ÁîüÊàêAIÂèçÈ¶àÊ∂àÊÅØ
    const adjustmentMessage = generateRouteAdjustmentMessage('delete', locationToDelete.name)
    const aiMessage: Message = {
      id: Date.now().toString(),
      role: 'assistant',
      content: adjustmentMessage,
      timestamp: new Date(),
      itinerary: updatedItinerary
    }
    
    setMessages(prev => [...prev, aiMessage])
  }, [currentItinerary, deleteLocation, optimizeRoute, generateRouteAdjustmentMessage, updateItinerary])

  const handleLocationEdit = useCallback((dayIndex: number, locationIndex: number) => {
    // ËøôÈáåÂèØ‰ª•ÊâìÂºÄÁºñËæëÂØπËØùÊ°ÜÔºåÊöÇÊó∂ÁÆÄÂçïÂ§ÑÁêÜ
    const location = currentItinerary[dayIndex]?.locations[locationIndex]
    if (location) {
      const newMessage = `ËØ∑Â∏ÆÊàëË∞ÉÊï¥"${location.name}"ÁöÑÂÆâÊéíÔºåÊØîÂ¶Ç‰øÆÊîπÊ∏∏ËßàÊó∂Èó¥ÊàñËÄÖÊõ¥Êç¢ÂÖ∂‰ªñÁ±ª‰ººÊôØÁÇπ`
      handleSendMessage(newMessage)
    }
  }, [currentItinerary, handleSendMessage])

  // Â§ÑÁêÜÊôØÁÇπÈáçÊéíÂ∫è
  const handleLocationReorder = useCallback(async (newItinerary: ItineraryDay[]) => {
    // Êõ¥Êñ∞Ë°åÁ®ãÁä∂ÊÄÅ
    setCurrentItinerary(newItinerary)
    updateItinerary(newItinerary)
    
    // ÁîüÊàêAIÂèçÈ¶àÊ∂àÊÅØ
    const reorderMessage: Message = {
      id: Date.now().toString(),
      role: 'assistant',
      content: `üîÑ Ë°åÁ®ãÈ°∫Â∫èÂ∑≤Êõ¥Êñ∞ÔºÅÊàëÂ∑≤ÈáçÊñ∞ËÆ°ÁÆó‰∫ÜÊó∂Èó¥ÂÆâÊéíÂíåË∑ØÁ∫øËßÑÂàí„ÄÇ

üìç **‰ºòÂåñÂª∫ËÆÆ**
‚Ä¢ Ê†πÊçÆÊñ∞ÁöÑÈ°∫Â∫èË∞ÉÊï¥‰∫ÜÊ∏∏ËßàÊó∂Èó¥
‚Ä¢ ÈáçÊñ∞ËßÑÂàí‰∫ÜÊúÄ‰ºòË∑ØÁ∫ø
‚Ä¢ ËÄÉËôë‰∫Ü‰∫§ÈÄöÂíåÊó∂Èó¥ÊàêÊú¨

ÊÇ®ÂèØ‰ª•Âú®Âú∞Âõæ‰∏äÊü•ÁúãÊñ∞ÁöÑË∑ØÁ∫øÂÆâÊéíÔºÅ`,
      timestamp: new Date()
    }
    
    setMessages(prev => [...prev, reorderMessage])
  }, [updateItinerary])

  const handleShare = useCallback(async () => {
    if (currentItinerary.length === 0) return
    
    try {
      await copyShareLink(currentItinerary, `${currentItinerary.length}Â§©ÊóÖË°åËÆ°Âàí`)
      
      // ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØ
      const successMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: 'üîó ÂàÜ‰∫´ÈìæÊé•Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅÊÇ®ÂèØ‰ª•Â∞ÜÈìæÊé•ÂèëÈÄÅÁªôÊúãÂèãÔºåËÆ©‰ªñ‰ª¨Êü•ÁúãÊÇ®ÁöÑÊóÖË°åËÆ°Âàí„ÄÇ',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, successMessage])
    } catch (error) {
      console.error('ÂàÜ‰∫´Â§±Ë¥•:', error)
    }
  }, [currentItinerary, copyShareLink])

  const handleShareServer = useCallback(async () => {
    if (currentItinerary.length === 0) return
    
    try {
      // ÂàùÂßãÂåñÂ≠òÂÇ®ÊúçÂä°
      await initIndexedDB()
      await initServiceWorker()
      
      // ÁîüÊàêÂîØ‰∏ÄIDÁî®‰∫éÊúçÂä°Á´ØÂ≠òÂÇ®
      const id = `server_${convId}`
      const title = `${currentItinerary.length}Â§©ÊóÖË°åËÆ°Âàí`
      
      console.log('üîÑ Ê≠£Âú®ÁîüÊàêÂπ∂‰øùÂ≠òHTMLÊîªÁï•...')
      
      // ÂêëÊúçÂä°Á´ØAPIÂàõÂª∫ÂàÜ‰∫´ÂÜÖÂÆπ
      const response = await fetch(`/api/shared/${id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title,
          itinerary: currentItinerary,
          guideId: convId
        })
      })
      
      const result = await response.json()
      
      if (result.success && result.data) {
        // ‰øùÂ≠òÂà∞IndexedDB
        await indexedDBManager.saveHTMLPage({
          id,
          title,
          html: result.data.html,
          createdAt: new Date().toISOString(),
          guideId: convId
        })
        await saveAsStaticFile(id);
        // ÁîüÊàêÂèØËÆøÈóÆÁöÑURL
        const savedPageUrl = `${window.location.origin}/shared/${id}`
        
        // Â§çÂà∂ÈìæÊé•Âà∞Ââ™Ë¥¥ÊùøÔºàÂ∏¶ÈîôËØØÂ§ÑÁêÜÔºâ
        let clipboardSuccess = false
        try {
          await navigator.clipboard.writeText(savedPageUrl)
          clipboardSuccess = true
        } catch (error) {
          console.warn('Ââ™Ë¥¥ÊùøÂ§çÂà∂Â§±Ë¥•ÔºåÂèØËÉΩÊòØÈ°µÈù¢Êú™ËÅöÁÑ¶:', error)
          // ÈôçÁ∫ßÊñπÊ°àÔºöÂàõÂª∫‰∏¥Êó∂ÊñáÊú¨ÂüüËøõË°åÂ§çÂà∂
          try {
            const textArea = document.createElement('textarea')
            textArea.value = savedPageUrl
            textArea.style.position = 'fixed'
            textArea.style.left = '-999999px'
            textArea.style.top = '-999999px'
            document.body.appendChild(textArea)
            textArea.focus()
            textArea.select()
            document.execCommand('copy')
            document.body.removeChild(textArea)
            clipboardSuccess = true
          } catch (fallbackError) {
            console.warn('ÈôçÁ∫ßÂ§çÂà∂ÊñπÊ°à‰πüÂ§±Ë¥•:', fallbackError)
          }
        }
        
        const successMessage: Message = {
          id: Date.now().toString(),
          role: 'assistant',
          content: `‚úÖ ÊîªÁï•Â∑≤‰øùÂ≠ò‰∏∫HTMLÈ°µÈù¢ÔºÅ\n\nüîó ÂèØÈÄöËøá‰ª•‰∏ãÈìæÊé•ËÆøÈóÆÔºö\n${savedPageUrl}\n\n${clipboardSuccess ? 'üìã ÈìæÊé•Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø' : 'üí° ËØ∑ÊâãÂä®Â§çÂà∂‰∏äÊñπÈìæÊé•'}`,
          timestamp: new Date()
        }
        setMessages(prev => [...prev, successMessage])
      } else {
        throw new Error(result.error || 'ÁîüÊàêHTMLÂ§±Ë¥•')
      }
    } catch (error) {
      console.error('‚ùå ‰øùÂ≠òÊîªÁï•Â§±Ë¥•:', error)
      const errorMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: 'ÊúçÂä°Á´ØÂàÜ‰∫´Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï„ÄÇ',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    }
  }, [convId, currentItinerary])

  const handleShareClient = useCallback(async () => {
    if (currentItinerary.length === 0) return
    
    try {
      // ÁîüÊàêÂÆ¢Êà∑Á´ØÊ∏≤ÊüìÂàÜ‰∫´ÈìæÊé• (‰ΩøÁî®localStorageÔºåÊ∑ªÂä†render=clientÂèÇÊï∞)
      const shareUrl = await generateShareLink(currentItinerary, `${currentItinerary.length}Â§©ÊóÖË°åËÆ°Âàí`)
      const clientShareUrl = shareUrl + '?render=client'
      
      // Â§çÂà∂‰øÆÊîπÂêéÁöÑÈìæÊé•
      await navigator.clipboard.writeText(clientShareUrl)
      
      const successMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: 'üü† ÂÆ¢Êà∑Á´ØÊ∏≤ÊüìÂàÜ‰∫´ÈìæÊé•Â∑≤Â§çÂà∂ÔºÅËøôÁßçÊñπÂºèÊîØÊåÅÂÆöÂà∂ÂäüËÉΩÔºå‰ΩìÈ™åÊõ¥ÂÆåÊï¥„ÄÇ',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, successMessage])
    } catch (error) {
      console.error('ÂÆ¢Êà∑Á´ØÂàÜ‰∫´Â§±Ë¥•:', error)
      const errorMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: 'ÂÆ¢Êà∑Á´ØÂàÜ‰∫´Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï„ÄÇ',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    }
  }, [currentItinerary, generateShareLink])

  const handleExportPDF = useCallback(() => {
    if (currentItinerary.length === 0) return
    
    try {
      exportAsTextFile(currentItinerary, `${currentItinerary.length}Â§©ÊóÖË°åËÆ°Âàí`)
      
      // ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØ
      const successMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: 'üìÑ Ë°åÁ®ãÊñá‰ª∂Â∑≤ÂØºÂá∫ÔºÅÊñá‰ª∂ÂåÖÂê´ÂÆåÊï¥ÁöÑË°åÁ®ãÂÆâÊéí„ÄÅÊó∂Èó¥Ë°®ÂíåÊóÖË°åË¥¥Â£´„ÄÇ',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, successMessage])
    } catch (error) {
      console.error('ÂØºÂá∫Â§±Ë¥•:', error)
      const errorMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: 'ÂØºÂá∫Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï„ÄÇ',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    }
  }, [currentItinerary, exportAsTextFile])

  const handleReturnHome = useCallback(() => {
    // ÈáçÁΩÆÂà∞ÂàùÂßãÁä∂ÊÄÅ
    setIsInitialState(true)
    setMessages([])
    setCurrentItinerary([])
    setConvId('')
  }, [])

  const handleShowHistory = useCallback(() => {
    router.push('/history')
  }, [router])

  return (
    <div className="min-h-screen relative">
      {/* Âä®ÊÄÅËÉåÊôØÂ±Ç */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-blue-950 dark:to-indigo-950"></div>
      
      {/* Âä®ÊÄÅÂÖâÂΩ±ÊïàÊûú */}
      <div className="fixed inset-0 opacity-70 dark:opacity-50 pointer-events-none">
        {/* ‰∏ªË¶ÅÂÖâÁêÉÁªÑ */}
        <div className="absolute top-20 left-0 w-96 h-96 bg-gradient-to-r from-blue-400/40 to-cyan-400/40 rounded-full blur-3xl animate-pulse-glow"></div>
        <div className="absolute top-40 right-0 w-80 h-80 bg-gradient-to-r from-indigo-400/35 to-purple-400/35 rounded-full blur-3xl animate-pulse-glow" style={{ animationDelay: '1s' }}></div>
        <div className="absolute bottom-32 left-1/3 w-64 h-64 bg-gradient-to-r from-cyan-300/30 to-blue-400/30 rounded-full blur-3xl animate-pulse-glow" style={{ animationDelay: '2s' }}></div>
        
        {/* Ê¨°Ë¶ÅÂÖâÂΩ±Â±Ç */}
        <div className="absolute top-1/2 left-10 w-48 h-48 bg-gradient-to-br from-purple-300/20 to-pink-300/20 rounded-full blur-2xl animate-float" style={{ animationDelay: '0.5s' }}></div>
        <div className="absolute bottom-1/4 right-20 w-56 h-56 bg-gradient-to-bl from-blue-300/25 to-indigo-300/25 rounded-full blur-2xl animate-float" style={{ animationDelay: '1.5s' }}></div>
        
        {/* ÊóãËΩ¨ÂÖâÁéØ */}
        <div className="absolute top-1/3 left-1/2 w-32 h-32 border border-blue-300/30 rounded-full animate-rotate-slow"></div>
        <div className="absolute bottom-1/2 right-1/4 w-24 h-24 border border-indigo-300/25 rounded-full animate-rotate-slow" style={{ animationDirection: 'reverse', animationDelay: '2s' }}></div>
        
        {/* ÊµÆÂä®Á≤íÂ≠êÁæ§ */}
        <div className="absolute top-1/4 left-1/4 w-4 h-4 bg-blue-400/60 rounded-full animate-drift"></div>
        <div className="absolute top-1/3 right-1/4 w-3 h-3 bg-indigo-400/60 rounded-full animate-drift" style={{ animationDelay: '1.5s' }}></div>
        <div className="absolute bottom-1/3 left-1/2 w-5 h-5 bg-cyan-400/50 rounded-full animate-drift" style={{ animationDelay: '2.5s' }}></div>
        <div className="absolute top-2/3 right-1/3 w-3 h-3 bg-purple-400/50 rounded-full animate-drift" style={{ animationDelay: '3s' }}></div>
        <div className="absolute top-1/6 right-1/6 w-2 h-2 bg-pink-400/60 rounded-full animate-drift" style={{ animationDelay: '4s' }}></div>
        <div className="absolute bottom-1/6 left-1/6 w-3 h-3 bg-teal-400/50 rounded-full animate-drift" style={{ animationDelay: '5s' }}></div>
        
        {/* Âä®ÊÄÅÁΩëÊ†º */}
        <div className="absolute inset-0 opacity-15 dark:opacity-8" style={{
          backgroundImage: `
            linear-gradient(rgba(59, 130, 246, 0.2) 1px, transparent 1px),
            linear-gradient(90deg, rgba(59, 130, 246, 0.2) 1px, transparent 1px)
          `,
          backgroundSize: '60px 60px',
          transform: 'perspective(1000px) rotateX(20deg)'
        }}></div>
        
        {/* Ê∏êÂèòÂ∞ÑÁ∫ø */}
        <div className="absolute top-0 left-1/2 w-px h-32 bg-gradient-to-b from-blue-400/40 to-transparent animate-pulse" style={{ animationDelay: '1s' }}></div>
        <div className="absolute top-1/4 right-0 w-32 h-px bg-gradient-to-l from-indigo-400/40 to-transparent animate-pulse" style={{ animationDelay: '2s' }}></div>
        <div className="absolute bottom-0 left-1/4 w-px h-24 bg-gradient-to-t from-purple-400/40 to-transparent animate-pulse" style={{ animationDelay: '3s' }}></div>
      </div>
      
      {/* ‰∏ªÂÜÖÂÆπÂå∫Âüü */}
      <div className="relative z-10">
        <div className="container mx-auto px-4 py-6">
        {/* È°µÈù¢È°∂ÈÉ®ÔºöDemoÊîªÁï•Âç°Áâá - ÂßãÁªàÊòæÁ§∫ */}
        <div className="mb-8">
          <DemoCards onSelectDemo={handleSelectDemo} onShowPopularGuides={handleShowPopularGuides} />
        </div>

        {/* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */}
        <div className="flex flex-col lg:flex-row gap-6">
          {/* Â∑¶‰æßÔºöËÅäÂ§©ÁïåÈù¢ */}
          <div className={`${isInitialState ? 'w-full' : 'w-full lg:w-1/2'} transition-all duration-500`}>
            <ChatInterface
              messages={messages}
              onSendMessage={handleSendMessage}
              isLoading={isLoading}
              isInitialState={isInitialState}
              xiaohongshuExtractor={
                <XiaohongshuExtractor 
                  onExtractSuccess={handleXiaohongshuExtract}
                  isLoading={isLoading}
                />
              }
              onShowHistory={handleShowHistory}
            />
          </div>

          {/* Âè≥‰æßÔºöÊóÖË°åËßÜÂõæÂå∫Âüü - Âè™ÊúâÂú®ÁîüÊàêÂÜÖÂÆπÂêéÊâçÊòæÁ§∫ */}
          {!isInitialState && (
            <div className="w-full lg:w-1/2">
              <div className="sticky top-2 transition-all duration-500 animate-in slide-in-from-right">
                <TravelViews 
                  itinerary={currentItinerary}
                  className="h-[calc(100vh-30px)]"
                  onLocationDelete={handleLocationDelete}
                  onLocationEdit={handleLocationEdit}
                  onLocationReorder={handleLocationReorder}
                  onExportPDF={handleExportPDF}
                  onSendMessage={handleSendMessage}
                  onShare={handleShare}
                  onShareServer={handleShareServer}
                  onShareClient={handleShareClient}
                  onReturnHome={handleReturnHome}
                />
              </div>
            </div>
          )}
        </div>
        </div>
      </div>
    </div>
  )
}
